{"version":3,"file":"static/js/260.667c2e3b.chunk.js","mappings":"6QAGaA,GAAgBC,EAAAA,EAAAA,IAAOC,EAAAA,EAAPD,CAAH,kEAIbE,EAAWF,EAAAA,GAAAA,EAAH,sFAKRG,GAAiBH,EAAAA,EAAAA,IAAOI,EAAAA,GAAPJ,CAAH,oJ,6BCLrBK,EAASC,EAAAA,SAAaC,MAAM,CAChCC,KAAMF,EAAAA,SAAaG,IAAI,GAAGC,WAC1BC,MAAOL,EAAAA,SAAaK,QAAQD,WAC5BE,SAAUN,EAAAA,SAAaI,WAAWD,IAAI,KA6FxC,EA1FqB,WACnB,IAAMI,GAAWC,EAAAA,EAAAA,MAejB,OACE,UAACf,EAAD,CAAegB,MAAM,KAArB,WACE,SAACb,EAAD,wBACA,SAAC,KAAD,CACEc,cAAe,CAAER,KAAM,GAAIG,MAAO,GAAIC,SAAU,IAChDK,iBAAkBZ,EAClBa,SApBe,SAACC,EAAD,GAA4B,IAAjBC,EAAgB,EAAhBA,UAC9BP,GAASQ,EAAAA,EAAAA,IAASF,IAClBC,KAeE,SAKG,gBAAGE,EAAH,EAAGA,aAAcC,EAAjB,EAAiBA,QAASC,EAA1B,EAA0BA,OAAQC,EAAlC,EAAkCA,aAAcN,EAAhD,EAAgDA,OAAhD,OACC,UAACO,EAAA,EAAD,CAAMR,SAAUI,EAAhB,WACE,UAACI,EAAA,QAAD,CAAYC,UAAU,OAAOC,UAAU,OAAvC,WACE,SAACF,EAAA,QAAD,oBACA,SAACA,EAAA,UAAD,CACEG,KAAK,OACLrB,KAAK,OACLsB,SAAUL,EACVM,MAAOZ,EAAOX,KACdwB,QAAST,EAAQf,OAASgB,EAAOhB,KACjCE,UAAQ,EACRuB,UAAWT,EAAOhB,KAClB0B,YAAY,qBAEd,SAACR,EAAA,mBAAD,CAAuBG,KAAK,UAA5B,UACE,SAAC,KAAD,CAAcrB,KAAK,gBAIvB,UAACkB,EAAA,QAAD,CAAYC,UAAU,OAAOC,UAAU,QAAvC,WACE,SAACF,EAAA,QAAD,sBACA,SAACA,EAAA,UAAD,CACEG,KAAK,QACLrB,KAAK,QACLsB,SAAUL,EACVM,MAAOZ,EAAOR,MACdqB,QAAST,EAAQZ,QAAUa,EAAOb,MAClCuB,YAAY,cACZxB,UAAQ,EACRuB,UAAWT,EAAOb,SAEpB,SAACe,EAAA,mBAAD,CAAuBG,KAAK,UAA5B,UACE,SAAC,KAAD,CAAcrB,KAAK,gBAIvB,UAACkB,EAAA,QAAD,CAAYC,UAAU,OAAOC,UAAU,WAAvC,WACE,SAACF,EAAA,QAAD,wBACA,SAACA,EAAA,UAAD,CACEG,KAAK,WACLrB,KAAK,WACLsB,SAAUL,EACVM,MAAOZ,EAAOP,SACdoB,QAAST,EAAQX,WAAaY,EAAOZ,SACrCF,UAAQ,EACRuB,UAAWT,EAAOZ,SAClBsB,YAAY,cAEd,SAACR,EAAA,mBAAD,CAAuBG,KAAK,UAA5B,UACE,SAAC,KAAD,CAAcrB,KAAK,mBAIvB,SAAC2B,EAAA,EAAD,CAAQC,QAAQ,OAAOP,KAAK,SAA5B,qBAGA,SAAC1B,EAAD,CAAgBkC,GAAG,SAAnB,sECzFZ,EAHqB,WACnB,OAAO,SAAC,EAAD","sources":["components/RegisterForm/RegisterForm.styled.js","components/RegisterForm/RegisterForm.js","pages/RegisterPage/RegisterPage.js"],"sourcesContent":["import styled from 'styled-components';\nimport { Container } from 'react-bootstrap';\nimport { Link } from 'react-router-dom';\nexport const FormContainer = styled(Container)`\n  margin-top: 80px;\n  max-width: 550px;\n`;\nexport const FormName = styled.p`\n  color: #212529;\n  text-align: center;\n  font-size: 40px;\n`;\nexport const LinkToRegister = styled(Link)`\n  display: block;\n  color: #212529;\n  margin-top: 20px;\n  transition: 200 linear;\n  :hover {\n    color: #5456f6;\n  }\n`;\n","import { useDispatch } from 'react-redux';\nimport { Formik, ErrorMessage } from 'formik';\nimport { Form, Button } from 'react-bootstrap';\nimport { FormContainer, LinkToRegister, FormName } from './RegisterForm.styled';\nimport { register } from 'redux/auth-operations';\nimport * as yup from 'yup';\n\nconst schema = yup.object().shape({\n  name: yup.string().min(2).required(),\n  email: yup.string().email().required(),\n  password: yup.string().required().min(8),\n});\n\nconst RegisterForm = () => {\n  const dispatch = useDispatch();\n  const handleSubmit = (values, { resetForm }) => {\n    dispatch(register(values));\n    resetForm();\n  };\n  // const handleSubmit = e => {\n  //   e.preventDefault();\n  //   const form = e.target;\n  //   const name = form.elements.name.value;\n  //   const email = form.elements.email.value;\n  //   const password = form.elements.password.value;\n  //   dispatch(register({ name, email, password }));\n  //   form.reset();\n  // };\n\n  return (\n    <FormContainer fluid=\"sm\">\n      <FormName>Register</FormName>\n      <Formik\n        initialValues={{ name: '', email: '', password: '' }}\n        validationSchema={schema}\n        onSubmit={handleSubmit}\n      >\n        {({ handleSubmit, touched, errors, handleChange, values }) => (\n          <Form onSubmit={handleSubmit}>\n            <Form.Group className=\"mb-3\" controlId=\"name\">\n              <Form.Label>Name</Form.Label>\n              <Form.Control\n                type=\"text\"\n                name=\"name\"\n                onChange={handleChange}\n                value={values.name}\n                isValid={touched.name && !errors.name}\n                required\n                isInvalid={errors.name}\n                placeholder=\"Enter your name\"\n              />\n              <Form.Control.Feedback type=\"invalid\">\n                <ErrorMessage name=\"email\" />\n              </Form.Control.Feedback>\n            </Form.Group>\n\n            <Form.Group className=\"mb-3\" controlId=\"email\">\n              <Form.Label>Email </Form.Label>\n              <Form.Control\n                type=\"email\"\n                name=\"email\"\n                onChange={handleChange}\n                value={values.email}\n                isValid={touched.email && !errors.email}\n                placeholder=\"Enter email\"\n                required\n                isInvalid={errors.email}\n              />\n              <Form.Control.Feedback type=\"invalid\">\n                <ErrorMessage name=\"email\" />\n              </Form.Control.Feedback>\n            </Form.Group>\n\n            <Form.Group className=\"mb-3\" controlId=\"password\">\n              <Form.Label>Password</Form.Label>\n              <Form.Control\n                type=\"password\"\n                name=\"password\"\n                onChange={handleChange}\n                value={values.password}\n                isValid={touched.password && !errors.password}\n                required\n                isInvalid={errors.password}\n                placeholder=\"Password\"\n              />\n              <Form.Control.Feedback type=\"invalid\">\n                <ErrorMessage name=\"password\" />\n              </Form.Control.Feedback>\n            </Form.Group>\n\n            <Button variant=\"dark\" type=\"submit\">\n              Submit\n            </Button>\n            <LinkToRegister to=\"/login\">\n              Already registered, then go to the login page!\n            </LinkToRegister>\n          </Form>\n        )}\n      </Formik>\n    </FormContainer>\n  );\n};\n\nexport default RegisterForm;\n","import RegisterForm from 'components/RegisterForm';\nconst RegisterPage = () => {\n  return <RegisterForm />;\n};\nexport default RegisterPage;\n"],"names":["FormContainer","styled","Container","FormName","LinkToRegister","Link","schema","yup","shape","name","min","required","email","password","dispatch","useDispatch","fluid","initialValues","validationSchema","onSubmit","values","resetForm","register","handleSubmit","touched","errors","handleChange","Form","className","controlId","type","onChange","value","isValid","isInvalid","placeholder","Button","variant","to"],"sourceRoot":""}