{"version":3,"file":"static/js/297.ef0de76a.chunk.js","mappings":"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","sources":["components/ContactForm/ContactForm.styled.js","components/ContactForm/ContactForm.js","components/ContactForm/formToasts.js","components/Section/Section.styled.js","components/Section/Section.js","components/Contacts/contacts.styled.js","components/ContactsItem/ContactsItem.styled.js","components/ContactsItem/ContactsItem.js","components/ContactsItem/ItemToasts.js","components/Contacts/contactSkeleton.js","components/Contacts/Contacts.js","components/Filter/Filter.styled.js","components/Filter/Filter.js","pages/ContactsPage/ContactsPage.js"],"sourcesContent":["import styled from 'styled-components';\n\nimport { Form, Field } from 'formik';\n\nexport const FormText = styled.p`\n  padding-top: 5px;\n  position: absolute;\n  color: #ff0000;\n`;\nexport const Button = styled.button`\n  margin: 40px 0;\n  padding: 10px;\n  border-radius: 10%;\n  border: 3px solid #381b08;\n  background-color: #f5b780;\n`;\nexport const FormStyled = styled(Form)`\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n`;\nexport const InputForm = styled(Field)`\n  display: block;\n  border: 2px solid #b1aeac;\n  padding: 5px;\n  width: 300px;\n`;\nexport const PhoneWrapper = styled.div`\n  margin-top: 30px;\n`;\n","import { useRef } from 'react';\nimport { Formik, ErrorMessage } from 'formik';\nimport * as yup from 'yup';\nimport { nanoid } from 'nanoid';\nimport { showErrorToast, showPromiseToast } from './formToasts';\nimport {\n  useAddContactMutation,\n  useGetContactsQuery,\n} from '../../redux/contactsApi';\n\nimport {\n  FormText,\n  Button,\n  InputForm,\n  FormStyled,\n  PhoneWrapper,\n} from './ContactForm.styled';\n\nimport 'yup-phone';\n\nconst schema = yup.object().shape({\n  name: yup.string().required().min(2).max(20),\n  number: yup.string().phone().required('A phone number is required'),\n});\n\nconst ContactForm = () => {\n  const { data } = useGetContactsQuery();\n  const [addContact] = useAddContactMutation();\n  const loginInputId = useRef(nanoid());\n  const telInputId = useRef(nanoid());\n\n  const handleSubmit = (values, { resetForm }) => {\n    const { name, number } = values;\n\n    const isDuplicated = data.find(\n      contacts => contacts.name.toLowerCase() === name.toLowerCase()\n    );\n\n    if (isDuplicated) {\n      showErrorToast(name);\n      return;\n    }\n    const response = addContact({ name, number });\n    showPromiseToast(response);\n    resetForm();\n  };\n  const formError = message => <FormText>{message}</FormText>;\n\n  return (\n    <Formik\n      initialValues={{ name: '', number: '' }}\n      validationSchema={schema}\n      onSubmit={handleSubmit}\n    >\n      <FormStyled autoComplete=\"off\">\n        <div>\n          <label htmlFor={loginInputId.current}>Name</label>\n          <div>\n            <InputForm id={loginInputId.current} name=\"name\" type=\"text\" />\n            <ErrorMessage name=\"name\" render={formError} />\n          </div>\n        </div>\n        <PhoneWrapper>\n          <label htmlFor={telInputId.current}>Phone</label>\n          <div>\n            <InputForm id={telInputId.current} name=\"number\" type=\"tel\" />\n            <ErrorMessage name=\"number\" render={formError} />\n          </div>\n        </PhoneWrapper>\n        <Button type=\"submit\">Add contact</Button>\n      </FormStyled>\n    </Formik>\n  );\n};\n\nexport default ContactForm;\n","import toast from 'react-hot-toast';\nexport const showPromiseToast = response => {\n  toast.promise(\n    response,\n    {\n      loading: 'Creating a contact',\n      success: 'Successfully created!',\n\n      error: 'Opps, something wrong, try again',\n    },\n    {\n      position: 'botton-center',\n\n      style: {\n        marginTop: '10px',\n        minWidth: '250px',\n        color: '#000000',\n        backgroundColor: '#f5b780',\n      },\n      success: {\n        duration: 5000,\n\n        icon: 'ðŸ”¥',\n      },\n    }\n  );\n};\n\nexport const showErrorToast = name => {\n  toast.error(`${name} is already in contacts`, {\n    position: 'top-right',\n\n    style: {\n      marginTop: '10px',\n      minWidth: '250px',\n      color: '#000000',\n      backgroundColor: '#f5b780',\n    },\n  });\n};\n","import styled from 'styled-components';\n\nexport const FeedbackSection = styled.section`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  padding-top: 40px;\n  /* border-bottom: 3px solid #381b08; */\n`;\nexport const Title = styled.h2`\n  text-align: center;\n  margin-bottom: 20px;\n`;\n","import PropTypes from \"prop-types\";\nimport { FeedbackSection, Title } from \"./Section.styled\";\n\nfunction Section({ title, children }) {\n  return (\n    <FeedbackSection>\n      <Title>{title}</Title>\n      {children}\n    </FeedbackSection>\n  );\n}\n\nSection.propTypes = {\n  title: PropTypes.string,\n  children: PropTypes.node,\n};\n\nexport default Section;\n","import styled from 'styled-components';\n\nexport const ContactList = styled.ul`\n  margin-bottom: 40px;\n  padding: 0px;\n`;\nexport const ContentsWrapper = styled.div`\n  display: flex;\n  width: 300px;\n  height: 100%;\n  padding: 10px;\n  justify-content: space-between;\n  align-items: center;\n  border-radius: 5%;\n  border: 2px solid #4f8f2a;\n`;\nexport const Button = styled.button`\n  border-radius: 10px;\n  margin-left: 50px;\n  padding: 5px;\n  color: #ffffff;\n  background-color: #4f8f2a;\n`;\nexport const ContactWrapper = styled.div`\n  display: flex;\n  width: 100%;\n`;\nexport const Name = styled.span`\n  margin-right: 10px;\n`;\n","import styled from 'styled-components';\nexport const Item = styled.li`\n  display: flex;\n\n  justify-content: space-between;\n  align-items: center;\n  padding: 10px;\n  border-radius: 5%;\n  border: 2px solid #4f8f2a;\n\n  @media screen and (max-width: 768px) {\n    max-width: 300px;\n  }\n  @media screen and (min-width: 768px) {\n    width: 450px;\n  }\n\n  :not(:last-child) {\n    margin-bottom: 10px;\n  }\n`;\nexport const Button = styled.button`\n  border-radius: 10px;\n  margin-left: 10px;\n  padding: 5px;\n  color: #ffffff;\n  background-color: #4f8f2a;\n`;\nexport const ContactWrapper = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: space-between;\n  max-width: 300px;\n`;\nexport const Name = styled.span`\n  margin-right: 10px;\n`;\n","import PropTypes from 'prop-types';\nimport { useDeleteContactMutation } from 'redux/contactsApi';\nimport { Item, Button, ContactWrapper, Name } from './ContactsItem.styled';\nimport { showDeletingToast } from './ItemToasts';\nfunction ContactsItem({ id, name, phone }) {\n  const [deleteContact, { isLoading: isDeleting }] = useDeleteContactMutation();\n  const onDeleteContactById = id => {\n    const response = deleteContact(id);\n    showDeletingToast(response);\n  };\n  return (\n    <Item>\n      <ContactWrapper>\n        <Name>{name}:</Name>\n        <span>{phone}</span>\n      </ContactWrapper>\n      <Button\n        disabled={isDeleting}\n        onClick={() => onDeleteContactById(id)}\n        type=\"button\"\n      >\n        Delete\n      </Button>\n    </Item>\n  );\n}\nContactsItem.propTypes = {\n  name: PropTypes.string.isRequired,\n  id: PropTypes.string.isRequired,\n  phone: PropTypes.string.isRequired,\n};\n\nexport default ContactsItem;\n","import { toast } from 'react-hot-toast';\nexport const showDeletingToast = response => {\n  toast.promise(\n    response,\n    {\n      loading: 'Deleting a contact',\n      success: 'Successfully deleted!',\n\n      error: 'Opps, something wrong, try again',\n    },\n    {\n      position: 'botton-center',\n\n      style: {\n        marginTop: '10px',\n        minWidth: '250px',\n        color: '#ffffff',\n        backgroundColor: '#4f8f2a',\n      },\n      success: {\n        duration: 5000,\n\n        icon: 'ðŸ”¥',\n      },\n    }\n  );\n};\n","import ContactsItem from 'components/ContactsItem';\n\nconst ContactsSkeleton = () => {\n  return (\n    <ContactsItem\n      name=\"##########\"\n      key=\"ContactsItemSkeletonid\"\n      id=\"ContactsItemSkeletonid\"\n      phone=\"##########\"\n    />\n  );\n};\nexport default ContactsSkeleton;\n","import { useSelector } from 'react-redux';\nimport { useEffect } from 'react';\nimport { ContactList } from './contacts.styled';\nimport { useGetContactsQuery } from 'redux/contactsApi';\nimport ContactsItem from '../ContactsItem';\nimport { getvisibleContacts } from 'redux/selectors';\nimport ContactsSkeleton from './contactSkeleton';\nimport { getToken } from 'redux/selectors';\nfunction Contacts() {\n  const token = useSelector(getToken);\n  const { data, isFetching, isSuccess, refetch } = useGetContactsQuery();\n  useEffect(() => {\n    refetch();\n  }, [token, refetch]);\n\n  const visibleContacts = useSelector(state => getvisibleContacts(state, data));\n\n  return (\n    <>\n      <ContactList>\n        {isFetching && !visibleContacts && <ContactsSkeleton />}\n        {isSuccess &&\n          visibleContacts.length > 0 &&\n          visibleContacts.map(({ id, name, number }) => (\n            <ContactsItem name={name} key={id} id={id} phone={number} />\n          ))}\n        {isSuccess && visibleContacts.length < 1 && (\n          <p>You don't have any contacts yet</p>\n        )}\n      </ContactList>\n    </>\n  );\n}\n\nexport default Contacts;\n","import styled from 'styled-components';\n\nexport const FilterContact = styled.label`\n  display: flex;\n  flex-direction: column;\n\n  margin-bottom: 40px;\n`;\nexport const FilterDescription = styled.span`\n  display: block;\n  text-align: center;\n  padding-bottom: 10px;\n`;\nexport const Input = styled.input`\n  display: block;\n  border: 2px solid #b1aeac;\n  padding: 5px;\n  @media screen and (max-width: 768px) {\n    max-width: 300px;\n  }\n  @media screen and (min-width: 768px) {\n    width: 450px;\n  }\n`;\n","import PropTypes from 'prop-types';\n\nimport { FilterDescription, FilterContact, Input } from './Filter.styled';\nimport { getFilter } from 'redux/selectors';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { update } from '../../redux/filterSlice';\n\nfunction Filter() {\n  const dispatch = useDispatch();\n  const filter = useSelector(state => getFilter(state));\n  const onChange = ({ target: { value } }) =>\n    dispatch(update(value.toLowerCase()));\n\n  return (\n    <FilterContact>\n      <FilterDescription>Find contact by name</FilterDescription>\n      <Input value={filter} onChange={onChange} />\n    </FilterContact>\n  );\n}\n\nFilter.propTypes = {\n  value: PropTypes.string,\n  onChange: PropTypes.func,\n};\nexport default Filter;\n","import ContactForm from 'components/ContactForm';\nimport Section from 'components/Section';\nimport Contacts from 'components/Contacts';\nimport Filter from 'components/Filter';\n\nconst ContactsPage = () => {\n  return (\n    <>\n      <Section title=\"PhoneBook\">\n        <ContactForm />\n      </Section>\n\n      <Section title=\"Contacts\">\n        <Filter />\n        <Contacts />\n      </Section>\n    </>\n  );\n};\nexport default ContactsPage;\n"],"names":["FormText","styled","Button","FormStyled","Form","InputForm","Field","PhoneWrapper","schema","yup","shape","name","required","min","max","number","phone","data","useGetContactsQuery","useAddContactMutation","addContact","loginInputId","useRef","nanoid","telInputId","formError","message","initialValues","validationSchema","onSubmit","values","resetForm","find","contacts","toLowerCase","toast","position","style","marginTop","minWidth","color","backgroundColor","showErrorToast","response","loading","success","error","duration","icon","showPromiseToast","autoComplete","htmlFor","current","id","type","render","FeedbackSection","Title","title","children","ContactList","Item","ContactWrapper","Name","useDeleteContactMutation","deleteContact","isDeleting","isLoading","onDeleteContactById","showDeletingToast","disabled","onClick","token","useSelector","getToken","isFetching","isSuccess","refetch","useEffect","visibleContacts","state","getvisibleContacts","length","map","FilterContact","FilterDescription","Input","dispatch","useDispatch","filter","getFilter","value","onChange","target","update"],"sourceRoot":""}