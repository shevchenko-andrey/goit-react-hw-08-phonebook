{"version":3,"file":"static/js/194.87404ac6.chunk.js","mappings":"qQAGaA,GAAgBC,EAAAA,EAAAA,IAAOC,EAAAA,EAAPD,CAAH,kEAIbE,EAAWF,EAAAA,GAAAA,EAAH,sFAKRG,GAAiBH,EAAAA,EAAAA,IAAOI,EAAAA,GAAPJ,CAAH,oJ,GAUHA,EAAAA,GAAAA,EAAH,uF,sCChBfK,EAASC,EAAAA,SAAaC,MAAM,CAChCC,MAAOF,EAAAA,SAAaE,QAAQC,WAC5BC,SAAUJ,EAAAA,SAAaG,WAAWE,IAAI,KAgFxC,EA7EkB,WAChB,IAAMC,GAAWC,EAAAA,EAAAA,MAcjB,OACE,UAACd,EAAD,CAAee,MAAM,KAArB,WACE,SAACZ,EAAD,qBACA,SAAC,KAAD,CACEa,cAAe,CAAEP,MAAO,GAAIE,SAAU,IACtCM,iBAAkBX,EAClBY,SAnBe,SAACC,EAAD,GAA4B,IAAjBC,EAAgB,EAAhBA,UAC9BP,GAASQ,EAAAA,EAAAA,IAAMF,IACfC,KAcE,SAKG,gBAAGE,EAAH,EAAGA,aAAcC,EAAjB,EAAiBA,QAASC,EAA1B,EAA0BA,OAAQC,EAAlC,EAAkCA,aAAcN,EAAhD,EAAgDA,OAAhD,OACC,UAACO,EAAA,EAAD,CAAMC,YAAU,EAACT,SAAUI,EAA3B,WACE,UAACI,EAAA,QAAD,CAAYE,UAAU,OAAOC,UAAU,QAAvC,WACE,SAACH,EAAA,QAAD,sBACA,SAACA,EAAA,UAAD,CACEI,KAAK,QACLC,KAAK,QACLC,SAAUP,EACVQ,MAAOd,EAAOV,MACdyB,QAASX,EAAQd,QAAUe,EAAOf,MAClC0B,YAAY,cACZzB,UAAQ,EACR0B,UAAWZ,EAAOf,SAEpB,SAACiB,EAAA,mBAAD,CAAuBI,KAAK,UAA5B,UACE,SAAC,KAAD,CAAcC,KAAK,aAGrB,SAACL,EAAA,OAAD,CAAWE,UAAU,aAArB,gEAKF,UAACF,EAAA,QAAD,CAAYE,UAAU,OAAOC,UAAU,WAAvC,WACE,SAACH,EAAA,QAAD,wBACA,SAACA,EAAA,UAAD,CACEI,KAAK,WACLC,KAAK,WACLC,SAAUP,EACVQ,MAAOd,EAAOR,SACduB,QAASX,EAAQZ,WAAaa,EAAOb,SACrCD,UAAQ,EACR0B,UAAWZ,EAAOb,SAClBwB,YAAY,cAGd,SAACT,EAAA,mBAAD,CAAuBI,KAAK,UAA5B,UACE,SAAC,KAAD,CAAcC,KAAK,mBAIvB,SAACM,EAAA,EAAD,CAAQC,QAAQ,OAAOR,KAAK,SAA5B,qBAGA,SAAC1B,EAAD,CAAgBmC,GAAG,YAAnB,8DC1EZ,EAHkB,WAChB,OAAO,SAAC,EAAD","sources":["components/LoginForm/LoginForm.styled.js","components/LoginForm/LoginForm.js","pages/LoginPage/LoginPage.js"],"sourcesContent":["import styled from 'styled-components';\nimport { Container } from 'react-bootstrap';\nimport { Link } from 'react-router-dom';\nexport const FormContainer = styled(Container)`\n  margin-top: 80px;\n  max-width: 550px;\n`;\nexport const FormName = styled.p`\n  color: #212529;\n  text-align: center;\n  font-size: 40px;\n`;\nexport const LinkToRegister = styled(Link)`\n  display: block;\n  color: #212529;\n  margin-top: 20px;\n  transition: 200 linear;\n  :hover {\n    color: #5456f6;\n  }\n`;\n\nexport const FormText = styled.p`\n  padding-top: 5px;\n  position: absolute;\n  color: #ff0000;\n`;\n","import { useDispatch } from 'react-redux';\nimport { Form, Button } from 'react-bootstrap';\nimport { FormContainer, LinkToRegister, FormName } from './LoginForm.styled';\nimport { logIn } from 'redux/auth-operations';\nimport { Formik, ErrorMessage } from 'formik';\nimport * as yup from 'yup';\nconst schema = yup.object().shape({\n  email: yup.string().email().required(),\n  password: yup.string().required().min(8),\n});\n\nconst LoginForm = () => {\n  const dispatch = useDispatch();\n  const handleSubmit = (values, { resetForm }) => {\n    dispatch(logIn(values));\n    resetForm();\n  };\n  // const handleSubmit = e => {\n  //   e.preventDefault();\n  //   const form = e.target;\n  //   const email = form.elements.email.value;\n  //   const password = form.elements.password.value;\n  //   dispatch(logIn({ email, password }));\n  //   form.reset();\n  // };\n\n  return (\n    <FormContainer fluid=\"sm\">\n      <FormName>Login</FormName>\n      <Formik\n        initialValues={{ email: '', password: '' }}\n        validationSchema={schema}\n        onSubmit={handleSubmit}\n      >\n        {({ handleSubmit, touched, errors, handleChange, values }) => (\n          <Form noValidate onSubmit={handleSubmit}>\n            <Form.Group className=\"mb-3\" controlId=\"email\">\n              <Form.Label>Email </Form.Label>\n              <Form.Control\n                type=\"email\"\n                name=\"email\"\n                onChange={handleChange}\n                value={values.email}\n                isValid={touched.email && !errors.email}\n                placeholder=\"Enter email\"\n                required\n                isInvalid={errors.email}\n              />\n              <Form.Control.Feedback type=\"invalid\">\n                <ErrorMessage name=\"email\" />\n              </Form.Control.Feedback>\n\n              <Form.Text className=\"text-muted\">\n                We'll never share your email with anyone else.\n              </Form.Text>\n            </Form.Group>\n\n            <Form.Group className=\"mb-3\" controlId=\"password\">\n              <Form.Label>Password</Form.Label>\n              <Form.Control\n                type=\"password\"\n                name=\"password\"\n                onChange={handleChange}\n                value={values.password}\n                isValid={touched.password && !errors.password}\n                required\n                isInvalid={errors.password}\n                placeholder=\"Password\"\n              />\n\n              <Form.Control.Feedback type=\"invalid\">\n                <ErrorMessage name=\"password\" />\n              </Form.Control.Feedback>\n            </Form.Group>\n\n            <Button variant=\"dark\" type=\"submit\">\n              Submit\n            </Button>\n            <LinkToRegister to=\"/register\">\n              Not registered yet, then register now!\n            </LinkToRegister>\n          </Form>\n        )}\n      </Formik>\n    </FormContainer>\n  );\n};\n\nexport default LoginForm;\n","import LoginForm from '../../components/LoginForm/LoginForm';\nconst LoginPage = () => {\n  return <LoginForm />;\n};\nexport default LoginPage;\n"],"names":["FormContainer","styled","Container","FormName","LinkToRegister","Link","schema","yup","shape","email","required","password","min","dispatch","useDispatch","fluid","initialValues","validationSchema","onSubmit","values","resetForm","logIn","handleSubmit","touched","errors","handleChange","Form","noValidate","className","controlId","type","name","onChange","value","isValid","placeholder","isInvalid","Button","variant","to"],"sourceRoot":""}